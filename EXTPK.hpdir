@ =============================================================================
@ Library Name : Extension Pack HP
@ Author       : Cristiano Fraga G. Nunes
@ Repository   : https://github.com/cfgnunes/extension-pack-hp
@ Language     : HP UserRPL (HP 49 series calculators)
@ Encoding     : RPL character set (no translation)
@ Description  : Extension Pack HP is a library developed for HP 49 series
@ calculators, including the HP 50g, HP 49g+, HP 49g, and HP 48GII. It brings
@ features commonly found in other calculators to the HP 49 series, helping to
@ fill functional gaps left by the original firmware.
@ =============================================================================

@ -----------------------------------------------------------------------------
@ How to Compile and Test the Library
@ -----------------------------------------------------------------------------
@ 1. Enable RPL Mode.
@ 2. Attach the development library using the command: 256 ATTACH
@ 3. Place this directory in the calculator.
@ 4. Change to this new directory.
@ 5. Create the library using the command: CRLIB
@ 6. The library will now be on the stack.
@ 7. Store it in port 0 (IRAM) using: 0 STO
@
@ To install the library permanently, store it in port 2 (FLASH).

@ -----------------------------------------------------------------------------
@ HPUserEdit metadata
@ -----------------------------------------------------------------------------
@ The following metadata is used by the HPUserEdit to store the object in the
@ calculator.
@
@ %NAME%=MYLIB

@ -----------------------------------------------------------------------------
@ Directory Definition
@ -----------------------------------------------------------------------------
@ This is the directory object containing all variables needed to build the
@ library.
DIR

  @ ---------------------------------------------------------------------------
  @ #XXX Special variables
  @ These variables are used for CRLIB command for building the library.
  @ ---------------------------------------------------------------------------

  @ The $ROMID variable must contain the library number or your library.
  @ This number must be in the range 769 to 1791.
  @ # NOTE Variable: $ROMID
  $ROMID 1723

  @ # NOTE Variable: $CONFIG
  $CONFIG 1

  @ The $TITLE variable must contain a character string defining the title of
  @ the library. This string must be less than 256 characters long. The first
  @ five characters will be used for the name that is shown in the library
  @ menu.
  @ # NOTE Variable: $TITLE
  $TITLE "Extension Pack HP v3.1"

  @ The $VISIBLE variable contains a list of all the variables in the current
  @ directory that you want to have visible in the library menu.
  @ # NOTE Variable: $VISIBLE
  $VISIBLE {
    EXTPK
    RSALG
    RSRPN
    XFRAC
    NSOLVE
    DSTAT
    RECPOL
    CMENU
  }

  @ The $HIDDEN variable contains a list of all the variables in the current
  @ directory that you want to have invisible in the library. They are
  @ generally subprograms of your application.
  @ # NOTE Variable: $HIDDEN
  $HIDDEN {
    @ Special variables.
    ExtProgram

    @ Choose menus.
    ChooseMainMenu
    ChooseCustomMenus
    ChooseFinanceDepr
    ChooseFinanceMenu
    ChooseStatDist
    ChooseStatDistCont
    ChooseStatDistDisc
    ChooseStatDistInv
    ChooseSystemTools
    ChooseTimeMenu

    @ Apps.
    AppFinanceDepreciationDB
    AppFinanceDepreciationSL
    AppFinanceDepreciationSOYD
    AppFinanceIRR
    AppFinanceNPV
    AppMenuCombinatorics
    AppMenuComplex
    AppMenuEquations
    AppMenuFinance
    AppMenuMatrix
    AppSolveNLSystem
    AppSolveNumerical
    AppSolveTriangle
    AppStatDescriptiveStatistics
    AppStatDistContBeta
    AppStatDistContCauchy
    AppStatDistContChi
    AppStatDistContExponential
    AppStatDistContFDistribution
    AppStatDistContGamma
    AppStatDistContNormal
    AppStatDistContTStudent
    AppStatDistContUniform
    AppStatDistContWeibull
    AppStatDistDiscBernoulli
    AppStatDistDiscBinomial
    AppStatDistDiscBinomialNeg
    AppStatDistDiscGeometric
    AppStatDistDiscHipergeometric
    AppStatDistDiscPoisson
    AppStatDistDiscUniform
    AppStatDistInvBinomial
    AppStatDistInvCauchy
    AppStatDistInvChi
    AppStatDistInvExponential
    AppStatDistInvFDistribution
    AppStatDistInvNormal
    AppStatDistInvPoisson
    AppStatDistInvTStudent
    AppStatDistInvUniform
    AppStatDistInvWeibull
    AppStatPercentile
    AppTimeDateAdd
    AppTimeDateDifference

    @ Util functions.
    UtilArrayListDecompose
    UtilArrayListToDAT
    UtilArrayListToList
    UtilConvertMixedFraction
    UtilDateAddDate
    UtilDateAddYear
    UtilDateFromStack
    UtilDateToStack
    UtilDateToStr
    UtilGuiChoose
    UtilGuiInform
    UtilMenuAddItem
    UtilPurgeHomeFiles
    UtilPushSystemFlagsApp
    UtilResetSystemFlagsAlgebraic
    UtilResetSystemFlagsRpn
    UtilTriangleHeronArea
    UtilTriangleLawOfCossineAngle
    UtilTriangleLawOfCossineSide
    UtilTriangleLawOfSinesAngle
    UtilTriangleLawOfSinesSide
    UtilValidateLessEqual
    UtilValidateRange
  }

  @ The $EXTPRG variable contains the name of the extension program of the
  @ library. This program must be either a visible or an hidden object of the
  @ library. This can be used to customize built-in menus with your own
  @ functions, as if they were part of the system. The calculator does not
  @ provide every possible function in every area, but they let you customize
  @ the built in menu in order to add your functions as if they were built in.
  @ # NOTE Variable: $EXTPRG
  $EXTPRG 'ExtProgram'

  ExtProgram ´
    @ #NOTE Function: ExtProgram
    @ This is the Extension Program of the library.

    @ The Extension Program is executed automatically
    @ each time a system menu (e.g., statistics, finance) is displayed.
    @
    @ Example:
    @ When you call the "APPS menu", the calculator put on the stack the list
    @ of this menu:
    @ {
    @   { "1. Plot functions..." ´ Action ª }
    @   { "2. I/O functions..." ´ Action ª }
    @    ...
    @ } 0
    @ The last number 0 is the "message number".
    @
    @ Each "message number" has a specific meaning as described below:
    @ 0 APPS menu
    @ 1 Main Statistics menu
    @ 2 Hypothesis statistics menu
    @ 3 Confidence interval statistics menu
    @ 4 Finance menu
    @ 5 Numeric solver menu
    @ 6 Time menu

    DUP R~SB

    ç opt
    ´
      CASE

        @ Add a new menu entry if the "APPS menu" is active.
        opt 0 == THEN
          SWAP
          "Custom menus" ´ ChooseCustomMenus ª UtilMenuAddItem
          "System tools" ´ ChooseSystemTools ª UtilMenuAddItem
          SWAP
        END

        @ Add a new menu entry if the "Main Statistics menu" is active.
        opt 1 == THEN
          SWAP
          "Prob. distributions" 30 CHR + ´ ChooseStatDist ª UtilMenuAddItem
          "DSTAT" ´ DSTAT ª UtilMenuAddItem
          SWAP
        END

        @ Add Finance functions if "Finance menu" is active.
        opt 4 == THEN
          ""
          { }

          "Time Value of Money" 30 CHR + { } UtilMenuAddItem
          "Net Present Value" 30 CHR + ´ AppFinanceNPV ª UtilMenuAddItem
          "Int. Rate of Return" 30 CHR + ´ AppFinanceIRR ª UtilMenuAddItem
          "Depreciation methods" 30 CHR + ´ ChooseFinanceDepr ª UtilMenuAddItem

          1
          CHOOSE

          @ Exit if the user presses "Cancel".
          NOT IF THEN 2 DROPN KILL END

          DUP
          TYPE 5 == IF THEN
            @ If is selected "1.Time Value of Money",
            @ clear temp data on the stack and continue.
            DROP
          ELSE
            @ Otherwise, evaluate the selected program.
            3 ROLLD 2 DROPN
            EVAL
            KILL
          END

        END

        @ Add a new menu entry if the "Numeric solver menu" is active.
        opt 5 == THEN
          SWAP
          "Solve nonlinear sys" 30 CHR + ´ AppSolveNLSystem ª UtilMenuAddItem
          "Triangle solver" 30 CHR + ´ AppSolveTriangle ª UtilMenuAddItem
          SWAP
        END

        @ Add a new menu entry if the "Time menu" is active.
        opt 6 == THEN
          SWAP
          "Date add/subtract" 30 CHR + ´ AppTimeDateAdd ª UtilMenuAddItem
          "Date difference" 30 CHR + ´ AppTimeDateDifference ª UtilMenuAddItem
          SWAP
        END

      END
    ª
  ª

  @ ---------------------------------------------------------------------------
  @ #XXX Choose menus
  @ These functions are used to display custom menus.
  @ ---------------------------------------------------------------------------

  ChooseMainMenu ´
    @ #NOTE Choose: ChooseMainMenu
    @ Displays a unified menu with all features provided by the Extension Pack
    @ HP, offering a convenient shortcut for quick access.

    "Extension Pack HP"
    {
      { "1.Solve nonlinear sys" ´ AppSolveNLSystem ª }
      { "2.Triangle solver" ´ AppSolveTriangle ª }
      { "3.Finance" ´ ChooseFinanceMenu ª }
      { "4.Time" ´ ChooseTimeMenu ª }
      { "5.Prob. distributions" ´ ChooseStatDist ª }
      { "6.Custom menus" ´ ChooseCustomMenus ª }
      { "7.System tools" ´ ChooseSystemTools ª }
    }
    UtilGuiChoose
  ª

  ChooseCustomMenus ´
    @ #NOTE Choose: ChooseCustomMenus

    "Custom menus"
    {
      { "1.Equations" ´ AppMenuEquations ª }
      { "2.Matrix" ´ AppMenuMatrix ª }
      { "3.Combinatorics" ´ AppMenuCombinatorics ª }
      { "4.Finance" ´ AppMenuFinance ª }
      { "5.Complex" ´ AppMenuComplex ª }
    }
    UtilGuiChoose
  ª

  ChooseFinanceDepr ´
    @ #NOTE Choose: ChooseFinanceDepr

    "Depreciation methods"
    {
      { "1.Straight line" ´ AppFinanceDepreciationSL ª }
      { "2.Sum-of-years digits" ´ AppFinanceDepreciationSOYD ª }
      { "3.Declining balance" ´ AppFinanceDepreciationDB ª }
    }
    UtilGuiChoose
  ª

  ChooseFinanceMenu ´
    @ #NOTE Choose: ChooseFinanceMenu

    "Finance"
    {
      { "1.Net Present Value" ´ AppFinanceNPV ª }
      { "2.Int. Rate of Return" ´ AppFinanceIRR ª }
      { "3.Depreciation methods" ´ ChooseFinanceDepr ª }
    }
    UtilGuiChoose
  ª

  ChooseStatDist ´
    @ #NOTE Choose: ChooseStatDist

    "Prob. distributions"
    {
      { "1.Discrete" ´ ChooseStatDistDisc ª }
      { "2.Continuous" ´ ChooseStatDistCont ª }
      { "3.Inverse" ´ ChooseStatDistInv ª }
    }
    UtilGuiChoose
  ª

  ChooseStatDistCont ´
    @ #NOTE Choose: ChooseStatDistCont

    "Continuous distributions"
    {
      { "1.Normal" ´ AppStatDistContNormal ª }
      { "2.T-Student" ´ AppStatDistContTStudent ª }
      { "3.Chi≤ (Pearson)" ´ AppStatDistContChi ª }
      { "4.Exponential" ´ AppStatDistContExponential ª }
      { "5.Uniform" ´ AppStatDistContUniform ª }
      { "6.Gamma" ´ AppStatDistContGamma ª }
      { "7.Beta" ´ AppStatDistContBeta ª }
      { "8.Weibull" ´ AppStatDistContWeibull ª }
      { "9.Cauchy-Lorentz" ´ AppStatDistContCauchy ª }
      { "10.F-distribution" ´ AppStatDistContFDistribution ª }
    }
    UtilGuiChoose
  ª

  ChooseStatDistDisc ´
    @ #NOTE Choose: ChooseStatDistDisc

    "Discrete distributions"
    {
      { "1.Binomial" ´ AppStatDistDiscBinomial ª }
      { "2.Poisson" ´ AppStatDistDiscPoisson ª }
      { "3.Bernoulli" ´ AppStatDistDiscBernoulli ª }
      { "4.Uniform" ´ AppStatDistDiscUniform ª }
      { "5.Neg. Binomial" ´ AppStatDistDiscBinomialNeg ª }
      { "6.Geometric" ´ AppStatDistDiscGeometric ª }
      { "7.Hipergeometric" ´ AppStatDistDiscHipergeometric ª }
    }
    UtilGuiChoose
  ª

  ChooseStatDistInv ´
    @ #NOTE Choose: ChooseStatDistInv

    "Inverse"
    {
      { "1.Binomial" ´ AppStatDistInvBinomial ª }
      { "2.Poisson" ´ AppStatDistInvPoisson ª }
      { "3.Normal" ´ AppStatDistInvNormal ª }
      { "4.T-Student" ´ AppStatDistInvTStudent ª }
      { "5.Chi≤ (Pearson)" ´ AppStatDistInvChi ª }
      { "6.Exponential" ´ AppStatDistInvExponential ª }
      { "7.Uniform (continous)" ´ AppStatDistInvUniform ª }
      { "8.Weibull" ´ AppStatDistInvWeibull ª }
      { "9.Cauchy-Lorentz" ´ AppStatDistInvCauchy ª }
      { "10.F-distribution" ´ AppStatDistInvFDistribution ª }
    }
    UtilGuiChoose
  ª

  ChooseSystemTools ´
    @ #NOTE Choose: ChooseSystemTools
    @ This function displays a menu with "System tools".

    "System tools"
    {
      { "1.Reset system flags" ´ UtilResetSystemFlagsAlgebraic ª }
      { "2.Purge all HOME files" ´ UtilPurgeHomeFiles ª }
      { "3.Factory reset ALG" ´ RSALG ª }
      { "4.Factory reset RPN" ´ RSRPN ª }
    }
    UtilGuiChoose
  ª

  ChooseTimeMenu ´
    @ #NOTE Choose: ChooseTimeMenu

    "Time"
    {
      { "1.Date add/subtract" ´ AppTimeDateAdd ª }
      { "2.Date difference" ´ AppTimeDateDifference ª }
    }
    UtilGuiChoose
  ª

  @ ---------------------------------------------------------------------------
  @ #XXX Apps
  @ These functions are self-contained apps with graphical user interfaces.
  @ ---------------------------------------------------------------------------

  AppFinanceDepreciationDB ´
    @ #NOTE App: AppFinanceDepreciationDB

    "DECLINING BALANCE (DB)"
    {
      { "Cost:" "Enter asset cost value" }
      { "Salvage:" "Enter asset salvage value" }
      { "Life:" "Enter end of asset life" }
    }
    { 1 0 }
    { }
    { 10000 1000 4 }
    UtilGuiInform

    ç SBV SAL L
    ´
      UtilPushSystemFlagsApp

      @ The columns of the output table are:
      @ - 1 Period number (j)
      @ - 2 Depreciation expense during period j ($DPN)
      @ - 3 Remaining depreciable value at end of period j ($RDV)
      'è' 'èDepr.' 'èValue'
      0 0 SBV
      { 2 3 } çARRY

      SBV '$RDV' STO

      @ Calculates the declining balance rate (double declining balance).
      2 L /

      ç RATE
      ´
        1 L FOR j
          @ Calculate depreciation for the period.
          $RDV RATE * çNUM '$DPN' STO

          @ Ensure $RDV doesn't fall below SAL.
          $RDV $DPN - SAL < IF THEN
            $RDV SAL - çNUM '$DPN' STO
          END

          $RDV $DPN - çNUM '$RDV' STO

          @ Add the line to the output table.
          j $DPN 2 RND $RDV 2 RND { 1 3 } çARRY SWAP 1 ROW+

          @ If the $RDV is equal to SAL, stop the loop.
          $RDV SAL 0.001 + < IF THEN
            L 'j' STO @ Workaround to break the FOR loop.
          END
        NEXT
      ª

      '$RDV' PURGE
      '$DPN' PURGE

      POP
    ª
  ª

  AppFinanceDepreciationSL ´
    @ #NOTE App: AppFinanceDepreciationSL

    "STRAIGHT LINE (SL)"
    {
      { "Cost:" "Enter asset cost value" }
      { "Salvage:" "Enter asset salvage value" }
      { "Life:" "Enter end of asset life" }
    }
    { 1 0 }
    { }
    { 10000 1000 4 }
    UtilGuiInform

    ç SBV SAL L
    ´
      UtilPushSystemFlagsApp

      @ The columns of the output table are:
      @ - 1 Period number (j)
      @ - 2 Depreciation expense during period j ($DPN)
      @ - 3 Remaining depreciable value at end of period j ($RDV)

      'è' 'èDepr.' 'èValue'
      0 0 SBV
      { 2 3 } çARRY

      SBV '$RDV' STO

      @ Calculates the constant $DPN.
      SBV SAL - L / çNUM

      ç $DPN
      ´
        1 L FOR j
          @ Calculates the $RDV.
          $RDV $DPN - çNUM
          '$RDV' STO

          @ Add the line to the output table.
          j $DPN 2 RND $RDV 2 RND { 1 3 } çARRY SWAP 1 ROW+
        NEXT
      ª

      '$RDV' PURGE

      POP
    ª
  ª

  AppFinanceDepreciationSOYD ´
    @ #NOTE App: AppFinanceDepreciationSOYD

    "SUM-OF-THE-YEARS DIGITS"
    {
      { "Cost:" "Enter asset cost value" }
      { "Salvage:" "Enter asset salvage value" }
      { "Life:" "Enter end of asset life" }
    }
    { 1 0 }
    { }
    { 10000 1000 4 }
    UtilGuiInform

    ç SBV SAL L
    ´
      UtilPushSystemFlagsApp

      @ The columns of the output table are:
      @ - 1 Period number (j)
      @ - 2 Depreciation expense during period j ($DPN)
      @ - 3 Remaining depreciable value at end of period j ($RDV)

      'è' 'èDepr.' 'èValue'
      0 0 SBV
      { 2 3 } çARRY

      SBV '$RDV' STO

      @ Calculates the sum-of-years digits.
      L FLOOR 1 + L FLOOR L FP 2 * + * 2 /

      @ Total depreciation.
      SBV SAL -

      ç SOYD DEP
      ´
        1 L FOR j
          @ Depreciation for year j.
          L j - 1 + SOYD / DEP * çNUM

          @ Calculates the $RDV.
          DUP $RDV SWAP - çNUM '$RDV' STO

          @ Add the line to the output table.
          j SWAP  2 RND $RDV 2 RND { 1 3 } çARRY SWAP 1 ROW+
        NEXT
      ª

      '$RDV' PURGE

      POP
    ª
  ª

  AppFinanceIRR ´
    @ #NOTE App: AppFinanceIRR
    @ This function calculates the Internal Rate of Return (IRR) of a cash
    @ flow.

    @ INFORM Section (Begin) --------------------------------------------------
    @ INFORM 'Title'.
    "INTERNAL RATE OF RETURN (IRR)"
    @ INFORM 'Field definitions'.
    {
      { "C:" "Enter cash flow" 3 }
    }
    @ INFORM 'Format' (col, tabs).
    { 1 0 }
    @ INFORM 'Default values'.
    { }
    @ INFORM 'Initial values'.
    'C' VTYPE IF 29 == THEN C ELSE [ -20 10 15 ] END
    1
    çLIST
    @ INFORM Section (End) ----------------------------------------------------
    UtilGuiInform

    @ Store inputs in variables to allow re-use and editing by the user.
    DUP
    'C' STO

    @ Calculates the IRR.
    ç C
    ´
      @ Purge '$IRR' in case it already exists, to allow symbolic computation.
      '$IRR' PURGE

      UtilPushSystemFlagsApp

      "'"
      @ Loop: for t = 1 to 'C.size'.
      1
      C SIZE OBJç DROP
      FOR t
        "+" + C t GET "/(1+$IRR)^(" + t + "-1)" + +
      NEXT
      "=0'" + STRç

      @ Solve the equation where NPV = 0.
      @ Initial guess is 0.5 (50%) for the root finder (numerical solver).
      '$IRR' .5 ROOT

      @ Convert the result to percentage.
      100 * çNUM
      "IRR" çTAG

      POP

      '$IRR' PURGE
    ª
  ª

  AppFinanceNPV ´
    @ #NOTE App: AppFinanceNPV
    @ This function calculates the Net Present Value (NPV) of a cash flow
    @ series.

    @ INFORM Section (Begin) --------------------------------------------------
    @ INFORM 'Title'.
    "NET PRESENT VALUE (NPV)"
    @ INFORM 'Field definitions'.
    {
      { "C:" "Enter cash flow" 3 }
      { "r:" "Enter interest rate (%)" 0 }
    }
    @ INFORM 'Format' (col, tabs).
    { 1 0 }
    @ INFORM 'Default values'.
    { }
    @ INFORM 'Initial values'.
    'C' VTYPE IF 29 == THEN C ELSE [ -20 10 15 ] END
    'r' VTYPE IF 0 == THEN r ELSE 5 END
    2
    çLIST
    @ INFORM Section (End) ----------------------------------------------------
    UtilGuiInform

    @ Store inputs in variables to allow re-use and editing by the user.
    2 DUPN
    'r' STO
    'C' STO

    @ Convert percentage rate to decimal
    100 /

    @ Calculates the NPV.
    ç C r
    ´
      UtilPushSystemFlagsApp

      @ Initialize the accumulator in the stack.
      0

      @ Loop: for t = 1 to 'C.size'.
      1
      C SIZE OBJç DROP
      FOR t
        C t GET    @ Get value of C[t].
        1 r +      @ Calculates (1+r).
        t 1 - ^ /  @ Calculates C[t] / (1+r)^(t-1).
        +          @ Add to the accumulator.
      NEXT

      çNUM
      "NPV" çTAG

      POP
    ª
  ª

  AppMenuCombinatorics ´
    @ #NOTE App: AppMenuCombinatorics
    @ This function displays a custom menu with various mathematical functions
    @ for combinatorics.

    @ Put in the stack the "Custom Menu",
    @ to be displayed and stored as 'CST' file in Home.
    {
      @ Options - Page 1.
      { "EDIT" ´ 35.1 KEYEVAL ª }
      { "VIEW" ´ DUP SCROLL ª }
      !
      COMB
      PERM
      { "ab/c" ´ XFRAC ª }
      @ Options - Page 2.
      { }
      { }
      { }
      { }
      { }
      { "MENUÜ" ´ CMENU ª }
    }

    @ Define and display the Custom Menu.
    MENU
  ª

  AppMenuComplex ´
    @ #NOTE App: AppMenuComplex
    @ This function displays a custom menu with various mathematical functions
    @ for complex numbers.

    @ Put in the stack the "Custom Menu",
    @ to be displayed and stored as 'CST' file in Home.
    {
      @ Options - Page 1.
      { "EDIT" ´ 35.1 KEYEVAL ª }
      { "VIEW" ´ DUP SCROLL ª }
      { "RE" ´ RE ª }
      { "IM" ´ IM ª }
      { "Re/Po" ´ RECPOL ª }
      { "ab/c" ´ XFRAC ª }
      @ Options - Page 2.
      { "ABS" ´ ABS ª }
      { "ARG" ´ ARG ª }
      { "CONJ" ´ CONJ ª }
      { "RREF" ´ RREF ª }
      { }
      { "MENUÜ" ´ CMENU ª }
    }

    @ Define and display the Custom Menu.
    MENU
  ª

  AppMenuEquations ´
    @ #NOTE App: AppMenuEquations
    @ This function displays a custom menu with various mathematical functions
    @ for equations.

    @ Put in the stack the "Custom Menu",
    @ to be displayed and stored as 'CST' file in Home.
    {
      @ Options - Page 1.
      { "EDIT" ´ 35.1 KEYEVAL ª }
      { "VIEW" ´ DUP SCROLL ª }
      { "PLOT" ´ PLOT ª }
      { "SIMPL" ´ SIMPLIFY ª }
      { "FACTO" ´ FACTOR ª }
      { "ab/c" ´ XFRAC ª }
      @ Options - Page 2.
      { "PARTF" ´ PARTFRAC ª }
      { "SOLVE" ´ SOLVEVX ª }
      { "NSOLV" NSOLVE }
      { "ISOL" ISOL }
      { }
      { "MENUÜ" ´ CMENU ª }
    }

    @ Define and display the Custom Menu.
    MENU
  ª

  AppMenuFinance ´
    @ #NOTE App: AppMenuFinance
    @ This function displays a custom menu with various mathematical functions
    @ for finance.

    @ Put in the stack the "Custom Menu",
    @ to be displayed and stored as 'CST' file in Home.
    {
      @ Options - Page 1.
      { "EDIT" ´ 35.1 KEYEVAL ª }
      { "VIEW" ´ DUP SCROLL ª }
      %T
      %CH
      %
      { "ab/c" ´ XFRAC ª }
      @ Options - Page 2.
      { }
      { }
      { }
      { }
      { }
      { "MENUÜ" ´ CMENU ª }
    }

    @ Define and display the Custom Menu.
    MENU
  ª

  AppMenuMatrix ´
    @ #NOTE App: AppMenuMatrix
    @ This function displays a custom menu with various mathematical functions
    @ for algebra.

    @ Put in the stack the "Custom Menu",
    @ to be displayed and stored as 'CST' file in Home.
    {
      @ Options - Page 1.
      { "EDIT" ´ 35.1 KEYEVAL ª }
      { "VIEW" ´ DUP SCROLL ª }
      { "TRAN" ´ TRAN ª }
      { "DET" ´ DET ª }
      { "RREF" ´ RREF ª }
      { "ab/c" ´ XFRAC ª }
      @ Options - Page 2.
      { "EGV" ´ EGV ª }
      { "RANK" ´ RANK ª }
      { "TRACE" ´ TRACE ª }
      { }
      { }
      { "MENUÜ" ´ CMENU ª }
    }

    @ Define and display the Custom Menu.
    MENU
  ª

  AppSolveNLSystem ´
    @ # NOTE App: AppSolveNLSystem

    @ INFORM Section (Begin) --------------------------------------------------
    @ INFORM 'Title'.
    "SOLVE NONLINEAR SYSTEM"
    @ INFORM 'Field definitions'
    {
      { "Eq:" "Enter the list of equations" 5 }
    }
    @ INFORM 'Format' (col, tabs).
    { 1 0 }
    @ INFORM 'Default values'.
    { }
    @ INFORM 'Initial values'.
    'EQN' VTYPE IF 5 == THEN EQN ELSE { 'X^2 + Y^2 = 25' 'EXP(X)+Y = 1' }  END
    1
    çLIST
    @ INFORM Section (End) ----------------------------------------------------
    UtilGuiInform

    UtilPushSystemFlagsApp

    @ Save the entered list of equations in a global variable 'EQN'.
    'EQN' STO

    @ Extract the variable names from the equations and store them in '$NAMES'.
    EQN ÖLIST LNAME SWAP DROP '$NAMES' STO

    @ Determine the number of variable names and store it in '$N'.
    $NAMES SIZE EVAL '$N' STO

    @ INFORM Section (Begin) --------------------------------------------------
    @ INFORM 'Title'.
    "INITIAL GUESSES"
    @ INFORM 'Field definitions'
    1 $N FOR k
      { }
      $NAMES k GET  ":" + +
      "" +
    NEXT
    $N çLIST
    @ INFORM 'Format' (col, tabs).
    { 2 0 }
    @ INFORM 'Default values'.
    { }
    @ INFORM 'Initial values'.
    { }
    1 $N FOR k
      1.0 +
    NEXT
    @ INFORM Section (End) ----------------------------------------------------
    INFORM
    POP
    @ Exit if the user presses "Cancel".
    NOT IF THEN '$N' PURGE '$NAMES' PURGE KILL END

    @ Extract the values from the list.
    EVAL

    @ Store the user's initial guesses in an array '$GUESS'.
    $N çARRY '$GUESS' STO

    @ Purge the variables to allow symbolic computation.
    $NAMES OBJç EVAL çLIST PURGE

    EQN OBJç çARRY
    $NAMES
    $GUESS
    $N

    @ Remove the temporary variables.
    '$NAMES' PURGE
    '$GUESS' PURGE
    '$N' PURGE

    ç eqn names guess n
    ´
      UtilPushSystemFlagsApp

      @ Call 'MSLV' to solve the nonlinear system:
      @ - Pass the system of equations.
      @ - Pass the variable names.
      @ - Pass the user's initial guesses.
      eqn names guess MSLV

      @ Store the resulting solutions in '$RESULTS'.
      SWAP DROP SWAP DROP
      '$RESULTS' STO

      @ Put each solution onto the stack tagged with the
      @ corresponding variable name.
      1 n FOR k
        $RESULTS k GET
        names k GET
        çTAG
      NEXT

      '$RESULTS' PURGE

      POP
    ª
  ª

  AppSolveNumerical ´
    @ # NOTE App: AppSolveNumerical

    RCLVX SWAP
    ROOT
    RCLVX SWAP =
  ª

  AppSolveTriangle ´
    @ # NOTE App: AppSolveTriangle

    "TRIANGLE SOLVER"
    {
      { "a:" "Enter length of side a" }
      { "b:" "Enter length of side b" }
      { "c:" "Enter length of side c" }
      { "A:" "Enter angle A (opposite side a)" }
      { "B:" "Enter angle B (opposite side b)" }
      { "C:" "Enter angle C (opposite side c)" }
    }
    { 3 0 }
    { }
    NOVAL 6 NDUPN çLIST
    INFORM

    @ Exit if the user presses "Cancel".
    NOT IF THEN KILL END

    @ Check if the input has at least three values.
    DUP ç lst
    ´
      0
      1 lst SIZE FOR k
        lst k GET NOVAL == IF THEN
          1 +
        END
      NEXT
      3 > IF THEN
        DROP
        "Error: Enter at least three values!" DOERR
      END
    ª

    @ Extract the values from the list.
    EVAL

    @ 180 degrees.
    -1 ACOS

    ç a b c A B C angTotal
    ´
      @ Input validations.
      a NOVAL == b NOVAL == AND c NOVAL == AND IF THEN
        "Error: Enter at least three values, including at least one side!"
        DOERR
      END

      @ Saves the current system flags and the directory path.
      PUSH
      -105 SF @ System flag: enable approximate mode.

      CASE

        @ Case: SSS (Side-Side-Side).

        a NOVAL ã b NOVAL ã AND c NOVAL ã AND THEN
          b c a UtilTriangleLawOfCossineAngle 'A' STO
          a c b UtilTriangleLawOfCossineAngle 'B' STO
          angTotal A - B - 'C' STO
        END

        @ Cases: SAS (Side-Angle-Side)

        a NOVAL ã b NOVAL ã AND C NOVAL ã AND THEN
          a b C UtilTriangleLawOfCossineSide 'c' STO
          b c a UtilTriangleLawOfCossineAngle 'A' STO
          angTotal A - C - 'B' STO
        END

        a NOVAL ã c NOVAL ã AND B NOVAL ã AND THEN
          a c B UtilTriangleLawOfCossineSide 'b' STO
          c b a UtilTriangleLawOfCossineAngle 'A' STO
          angTotal A - B - 'C' STO
        END

        b NOVAL ã c NOVAL ã AND A NOVAL ã AND THEN
          b c A UtilTriangleLawOfCossineSide 'a' STO
          c a b UtilTriangleLawOfCossineAngle 'B' STO
          angTotal A - B - 'C' STO
        END

        @ Cases: ASA (Angle-Side-Angle) and AAS (Angle-Angle-Side).

        A NOVAL ã B NOVAL ã AND THEN
          angTotal A - B - 'C' STO
          CASE
            a NOVAL ã THEN
              a A B UtilTriangleLawOfSinesSide 'b' STO
              a A C UtilTriangleLawOfSinesSide 'c' STO
            END
            b NOVAL ã THEN
              b B A UtilTriangleLawOfSinesSide 'a' STO
              b B C UtilTriangleLawOfSinesSide 'c' STO
            END
            c NOVAL ã THEN
              c C A UtilTriangleLawOfSinesSide 'a' STO
              c C B UtilTriangleLawOfSinesSide 'b' STO
            END
          END
        END

        A NOVAL ã C NOVAL ã AND THEN
          angTotal A - C - 'B' STO
          CASE
            a NOVAL ã THEN
              a A C UtilTriangleLawOfSinesSide 'c' STO
              a A B UtilTriangleLawOfSinesSide 'b' STO
            END
            b NOVAL ã THEN
              b B A UtilTriangleLawOfSinesSide 'a' STO
              b B C UtilTriangleLawOfSinesSide 'c' STO
            END
            c NOVAL ã THEN
              c C A UtilTriangleLawOfSinesSide 'a' STO
              c C B UtilTriangleLawOfSinesSide 'b' STO
            END
          END
        END

        B NOVAL ã C NOVAL ã AND THEN
          angTotal B - C - 'A' STO
          CASE
            a NOVAL ã THEN
              a A B UtilTriangleLawOfSinesSide 'b' STO
              a A C UtilTriangleLawOfSinesSide 'c' STO
            END
            b NOVAL ã THEN
              b B C UtilTriangleLawOfSinesSide 'c' STO
              b B A UtilTriangleLawOfSinesSide 'a' STO
            END
            c NOVAL ã THEN
              c C B UtilTriangleLawOfSinesSide 'b' STO
              c C A UtilTriangleLawOfSinesSide 'a' STO
            END
          END
        END

        @ Cases: SSA (Side-Side-Angle).

        a NOVAL ã b NOVAL ã AND THEN
          CASE
            A NOVAL ã THEN
              a A b UtilTriangleLawOfSinesAngle 'B' STO
            END
            B NOVAL ã THEN
              b B a UtilTriangleLawOfSinesAngle 'A' STO
            END
          END
          angTotal A - B - 'C' STO
          a A C UtilTriangleLawOfSinesSide 'c' STO
        END

        a NOVAL ã c NOVAL ã AND THEN
          CASE
            A NOVAL ã THEN
              a A c UtilTriangleLawOfSinesAngle 'C' STO
            END
            C NOVAL ã THEN
              c C a UtilTriangleLawOfSinesAngle 'A' STO
            END
          END
          angTotal A - C - 'B' STO
          a A B UtilTriangleLawOfSinesSide 'b' STO
        END

        b NOVAL ã c NOVAL ã AND THEN
          CASE
            B NOVAL ã THEN
              b B c UtilTriangleLawOfSinesAngle 'C' STO
            END
            C NOVAL ã THEN
              c C b UtilTriangleLawOfSinesAngle 'B' STO
            END
          END
          angTotal B - C - 'A' STO
          b B A UtilTriangleLawOfSinesSide 'a' STO
        END
      END

      @ Check the final solution.
      A B + C + TYPE 1 ==
      IF THEN
        POP
        "Error: No solution with given data!" DOERR
      END

      A B + C + angTotal 0.001 + >
      A 0 > NOT OR
      B 0 > NOT OR
      C 0 > NOT OR
      a 0 > NOT OR
      b 0 > NOT OR
      c 0 > NOT OR
      IF THEN
        POP
        "Error: No solution with given data!" DOERR
      END

      a çNUM "a" çTAG
      b çNUM "b" çTAG
      c çNUM "c" çTAG
      A çNUM "A" çTAG
      B çNUM "B" çTAG
      C çNUM "C" çTAG
      a b c UtilTriangleHeronArea çNUM "Area" çTAG

      POP
    ª
  ª

  AppStatDescriptiveStatistics ´
    @ # NOTE App: AppStatDescriptiveStatistics

    ç v
    ´
      UtilPushSystemFlagsApp

      v UtilArrayListToDAT

      NÖ çQ "n" çTAG
      MINÖ "Min" çTAG
      v 25 AppStatPercentile çNUM "Q1" çTAG
      v 50 AppStatPercentile çNUM "Med" çTAG
      v 75 AppStatPercentile çNUM "Q3" çTAG
      MAXÖ "Max" çTAG
      ÖX "ÖX" çTAG
      ÖX2 "ÖX≤" çTAG
      MEAN "Å" çTAG
      SDEV "sX" çTAG
      VAR "s≤X" çTAG
      PSDEV "òX" çTAG
      PVAR "ò≤X" çTAG

      POP
    ª
  ª

  AppStatDistContBeta ´
    @#NOTE App: AppStatDistContBeta

    "Beta X~B(å,ﬂ)"
    {
      { "å:" "Parameter å" }
      { "ﬂ:" "Parameter ﬂ" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 2 2 .5 }
    UtilGuiInform

    ç å ﬂ x
    ´
      UtilPushSystemFlagsApp

      'Ñ(0,x,a^(å-1)*(1-a)^(ﬂ-1)/(GAMMA(å)*GAMMA(ﬂ)/GAMMA(å+ﬂ)),a)'
      çNUM
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContCauchy ´
    @#NOTE App: AppStatDistContCauchy

    "Cauchy-Lorentz X~C(X0,ë)"
    {
      { "X0:" "Peak of the distribution" }
      { "ë:" "Half-width" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 0 1 .5 }
    UtilGuiInform

    ç X0 ë x
    ´
      UtilPushSystemFlagsApp

      '1/á*ATAN((x-X0)/ë)+1/2' çNUM
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContChi ´
    @#NOTE App: AppStatDistContChi

    "Chi≤ X~X≤(ë)"
    {
      { "ë:" "Degrees of freedom" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 2 .5 }
    UtilGuiInform

    ç v x
    ´
      UtilPushSystemFlagsApp

      v x UTPC 1. SWAP -
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContExponential ´
    @#NOTE App: AppStatDistContExponential

    "Exponential X~Exp(ﬂ)"
    {
      { "ﬂ:" "ﬂ is the time" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 1 .5 }
    UtilGuiInform

    ç ﬂ x
    ´
      UtilPushSystemFlagsApp

      '1-EXP(-x/ﬂ)' çNUM
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContFDistribution ´
    @#NOTE App: AppStatDistContFDistribution

    "F-distribution X~F(ën,ëd)"
    {
      { "ën:" "Degrees of freedom (numerator)" }
      { "ëd:" "Degrees of freedom (denominator)" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 10 10 1 }
    UtilGuiInform

    ç n d x
    ´
      UtilPushSystemFlagsApp

      n d x UTPF 1. SWAP -
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContGamma ´
    @#NOTE App: AppStatDistContGamma

    "Gamma X~G(å,ﬂ)"
    {
      { "å:" "Parameter å" }
      { "ﬂ:" "Parameter ﬂ" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 2 1 .5 }
    UtilGuiInform

    ç å ﬂ x
    ´
      UtilPushSystemFlagsApp

      'Ñ(0,x,a^(å-1)*EXP(-a/ﬂ)/(ﬂ^å*GAMMA(å)),a)' çNUM
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContNormal ´
    @#NOTE App: AppStatDistContNormal

    "Normal X~N(µ,ò)"
    {
      { "µ:" "Mean" }
      { "ò:" "Standard deviation" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 0 1 .5 }
    UtilGuiInform

    ç µ ò x
    ´
      UtilPushSystemFlagsApp

      µ ò 2. ^ çNUM x UTPN 1. SWAP -
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContTStudent ´
    @#NOTE App: AppStatDistContTStudent

    "T-Student X~T(ë)"
    {
      { "ë:" "Degrees of freedom" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 5 .5 }
    UtilGuiInform

    ç v x
    ´
      UtilPushSystemFlagsApp

      v x UTPT 1. SWAP -
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistContUniform ´
    @#NOTE App: AppStatDistContUniform

    "Uniform X~U(å,ﬂ)"
    {
      { "å:" "Lower bound" }
      { "ﬂ:" "Upper bound" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 0 1 .5 }
    UtilGuiInform

    ç a b x
    ´
      UtilPushSystemFlagsApp

      a x â x b < AND IF THEN
        '(x-a)/(b-a)' çNUM
        "P(Xâ" x + ")" + çTAG
      ELSE
        x a < IF THEN
          0
          "P(Xâ" x + ")" + çTAG
        ELSE
          1
          "P(Xâ" x + ")" + çTAG
        END
      END

      POP
    ª
  ª

  AppStatDistContWeibull ´
    @#NOTE App: AppStatDistContWeibull

    "Weibull X~W(å,ﬂ)"
    {
      { "å:" "Parameter å" }
      { "ﬂ:" "ﬂ, if you have ñ ç ﬂ=ñ" }
      { "x:" "x value for P(Xâx) (left tail)" }
    }
    { 1 0 }
    { }
    { 2 1 .5 }
    UtilGuiInform

    ç a b x
    ´
      UtilPushSystemFlagsApp

      '1-EXP(-(x/b)^a)' çNUM
      "P(Xâ" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscBernoulli ´
    @ # NOTE App: AppStatDistDiscBernoulli

    "Bernoulli X~Be(p)"
    {
      { "p:" "Prob. of success on a trial" }
      { "x:" "Success (1) or failure (0)" }
    }
    { 1 0 }
    { }
    { .5 1 }
    UtilGuiInform

    ç p x
    ´
      UtilPushSystemFlagsApp

      'p^x*(1-p)^(1-x)' çNUM
      "P(x=" x çQ + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscBinomial ´
    @ # NOTE App: AppStatDistDiscBinomial

    "Binomial X~B(n,p)"
    {
      { "n:" "Number of trials" }
      { "p:" "Prob. of success on a trial" }
      { "x:" "Number of successes in n trials" }
    }
    { 1 0 }
    { }
    { 5 .5 1 }
    UtilGuiInform

    ç n p x
    ´
      UtilPushSystemFlagsApp

      @ Input validations.
      x n "x" "n" UtilValidateLessEqual

      'COMB(n,x)*p^x*(1.-p)^(n-x)' çNUM
      "P(x=" x çQ + ")" + çTAG

      @ Additionally calculate the CDF value.
      'Ö(j=0,x,COMB(n,j)*p^j*(1.-p)^(n-j))' çNUM
      "P(xâ" x çQ + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscBinomialNeg ´
    @ # NOTE App: AppStatDistDiscBinomialNeg

    "Neg. Binomial X~B*(r,p)"
    {
      { "r:" "Number of successes" }
      { "p:" "Prob. of success on a trial" }
      { "x:" "Trials of the r-th success" }
    }
    { 1 0 }
    { }
    { 1 .5 1 }
    UtilGuiInform

    ç r p x
    ´
      UtilPushSystemFlagsApp

      'COMB(x-1,r-1)*p^r*(1-p)^(x-r)' çNUM
      "P(x=" x çQ + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscGeometric ´
    @ # NOTE App: AppStatDistDiscGeometric

    "Geometric X~G(p)"
    {
      { "p:" "Prob. of success on a trial" }
      { "x:" "Trials until first success" }
    }
    { 1 0 }
    { }
    { .5 10 }
    UtilGuiInform

    ç p x
    ´
      UtilPushSystemFlagsApp

      'p*(1-p)^(x-1)' çNUM
      "P(x=" x + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscHipergeometric ´
    @ # NOTE App: AppStatDistDiscHipergeometric

    "Hypergeometric X~H(N,K,n)"
    {
      { "N:" "Population size" }
      { "K:" "Num. of successes in population" }
      { "n:" "Sample size" }
      { "x:" "Num. of successes in sample" }
    }
    { 1 0 }
    { }
    { 10 6 4 2 }
    UtilGuiInform

    ç N K n x
    ´
      UtilPushSystemFlagsApp

      @ Input validations.
      n N "n" "N" UtilValidateLessEqual
      x K "x" "K" UtilValidateLessEqual

      'COMB(K,x)*COMB(N-K,n-x)/COMB(N,n)' çNUM
      "P(x=" x çQ + ")" + çTAG

      @ Additionally calculate the CDF value.
      'Ö(j=0,x,COMB(K,j)*COMB(N-K,n-j)/COMB(N,n))' çNUM
      "P(xâ" x çQ + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscPoisson ´
    @ # NOTE App: AppStatDistDiscPoisson

    "Poisson X~P(ñ)"
    {
      { "ñ:" "Lambda (expected value)" }
      { "x:" "Number of events per interval" }
    }
    { 1 0 }
    { }
    { 1 1 }
    UtilGuiInform

    ç ñ x
    ´
      UtilPushSystemFlagsApp

      'EXP(-ñ)*ñ^x/x!' çNUM
      "P(x=" x çQ + ")" + çTAG

      @ Additionally calculate the CDF value.
      'Ö(j=0,x,EXP(-ñ)*ñ^j/j!)' çNUM
      "P(xâ" x çQ + ")" + çTAG

      POP
    ª
  ª

  AppStatDistDiscUniform ´
    @ # NOTE App: AppStatDistDiscUniform

    "Uniform (discrete) X~U(n)"
    {
      { "n:" "Number total of objects" }
      { "x:" "Number of successes" }
    }
    { 1 0 }
    { }
    { 1 1 }
    UtilGuiInform

    ç n x
    ´
      UtilPushSystemFlagsApp

      '(1/n)^x' çNUM
      "P(x=" x çQ + ")" + çTAG

      POP
    ª
  ª

  AppStatDistInvBinomial ´
    @#NOTE App: AppStatDistInvBinomial

    "Binomial X~B(n,p;p(x))"
    {
      { "n:" "Number of trials" }
      { "p:" "Prob. of success on a trial" }
      { "p(x):" "Probability" }
    }
    { 1 0 }
    {
    }
    { 5 .5 .5 }
    UtilGuiInform

    ç n p b
    ´
      @ Input validations.
      b 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      @ Purge '$x' in case it already exists, to allow symbolic computation.
      '$x' PURGE

      '(p/(1-p))^$x/($x!*(n-$x)!)=b/((1-p)^n*n!)' EVAL
      '$x' 1. ROOT
      çNUM 0 RND

      "B(" n çQ + "," + p + ";" + b + ")" + çTAG

      '$x' PURGE

      POP
    ª
  ª

  AppStatDistInvCauchy ´
    @#NOTE App: AppStatDistInvCauchy

    "Cauchy-Lorentz X~C(X0,ë;p(x))"
    {
      { "X0:" "Peak of the distribution" }
      { "ë:" "Half-width" }
      { "p(x):" "Cum. probability (left tail)" }
    }
    { 1 0 }
    { }
    { 0 1 .5 }
    UtilGuiInform

    ç x g p
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      x g á p 1 2 / - * TAN * + çNUM
      "C(" x + "," + g + ";" + p + ")" + çTAG

      POP
    ª
  ª

  AppStatDistInvChi ´
    @#NOTE App: AppStatDistInvChi

    "Chi≤ X~X≤(ë;p(x))"
    {
      { "ë:" "Degrees of freedom" }
      { "p(x):" "Cumulative probability (area)" }
      { "Tail:" "0 left (lower), 1 right (upper)" }
    }
    { 1 0 }
    { }
    { 2 .5 0 }
    UtilGuiInform

    @ Tail type: 0 left (lower), 1 right (upper).
    0 == IF THEN 1 SWAP - 0 ELSE 1 END

    ç v p tail
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      @ Purge '$chi' in case it already exists, to allow symbolic computation.
      '$chi' PURGE

      "´ " v + " $chi UTPC " + p + " - ª" + STRç
      '$chi' 2. ROOT

      tail 0 == IF THEN
        "X≤(" v çQ + ";" + 1 p - + ")" + çTAG
      ELSE
        "X≤(" v çQ + ";" + p + ")" + çTAG
      END

      '$chi' PURGE

      POP
    ª
  ª

  AppStatDistInvExponential ´
    @#NOTE App: AppStatDistInvExponential

    "Exponential X~Exp(ﬂ;p(x))"
    {
      { "ﬂ:" "ﬂ, if you have ñ ç ﬂ=1/ñ" }
      { "p(x):" "Cum. probability (left tail)" }
    }
    { 1 0 }
    { }
    { 1 .5 }
    UtilGuiInform

    ç b p
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      b 1 p - LN * NEG çNUM
      "Exp(" b + ";" + p + ")" + çTAG

      POP
    ª
  ª

  AppStatDistInvFDistribution ´
    @#NOTE App: AppStatDistInvFDistribution

    "F-distribution X~F(ën,ëd;p(x))"
    {
      { "ën:" "Degrees of freedom (numerator)" }
      { "ëd:" "Degrees of freedom (denominator)" }
      { "p(x):" "Cumulative probability (area)" }
      { "Tail:" "0 left (lower), 1 right (upper)" }
    }
    { 1 0 }
    { }
    { 10 10 .5 0 }
    UtilGuiInform

    @ Tail type: 0 left (lower), 1 right (upper).
    0 == IF THEN 1 SWAP - 0 ELSE 1 END

    ç n d p tail
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      @ Purge '$f' in case it already exists, to allow symbolic computation.
      '$f' PURGE

      "´ " n + " " + d çNUM + " $f UTPF " + p + " - ª" + STRç
      '$f' 2. ROOT

      tail 0 == IF THEN
        "F(" n çQ + "," + d çQ + ";" + 1 p - + ")" + çTAG
      ELSE
        "F(" n çQ + "," + d çQ + ";" + p + ")" + çTAG
      END

      '$f' PURGE

      POP
    ª
  ª

  AppStatDistInvNormal ´
    @#NOTE App: AppStatDistInvNormal

    "Normal X~N(µ,ò;p(x))"
    {
      { "µ:" "Mean" }
      { "ò:" "Standard deviation" }
      { "p(x):" "Cumulative probability (area)" }
      { "Tail:" "0 left (lower), 1 right (upper)" }
    }
    { 1 0 }
    { }
    { 0 1 .5 0 }
    UtilGuiInform

    @ Tail type: 0 left (lower), 1 right (upper).
    0 == IF THEN 1 SWAP - 0 ELSE 1 END

    ç µ ò p tail
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      @ Purge '$x' in case it already exists, to allow symbolic computation.
      '$x' PURGE

      "´ " µ + " " + ò 2 ^ çNUM + " $x UTPN " + p + " - ª" + STRç
      '$x' 2. ROOT

      tail 0 == IF THEN
        "N(" µ çQ + "," + ò çQ + ";" + 1 p - + ")" + çTAG
      ELSE
        "N(" µ çQ + "," + ò çQ + ";" + p + ")" + çTAG
      END

      '$x' PURGE

      POP
    ª
  ª

  AppStatDistInvPoisson ´
    @#NOTE App: AppStatDistInvPoisson

    "Poisson X~P(ñ;p(x))"
    {
      { "ñ:" "Lambda (expected value)" }
      { "p(x):" "Probability" }
    }
    { 1 0 }
    { }
    { 1 .5 }
    UtilGuiInform

    ç ñ p
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      @ Purge '$x' in case it already exists, to allow symbolic computation.
      '$x' PURGE

      'EXP(ñ)*p=ñ^$x/$x!' EVAL
      '$x' 1. ROOT
      çNUM 0 RND

      "ó(" ñ + ";" + p + ")" + çTAG

      '$x' PURGE

      POP
    ª
  ª

  AppStatDistInvTStudent ´
    @#NOTE App: AppStatDistInvTStudent

    "T-Student X~T(ë;p(x))"
    {
      { "ë:" "Degrees of freedom" }
      { "p(x):" "Cumulative probability (area)" }
      { "Tail:" "0 left (lower), 1 right (upper)" }
    }
    { 1 0 }
    { }
    { 5 .5 0 }
    UtilGuiInform

    @ Tail type: 0 left (lower), 1 right (upper).
    0 == IF THEN 1 SWAP - 0 ELSE 1 END

    ç v p tail
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      @ Purge '$t' in case it already exists, to allow symbolic computation.
      '$t' PURGE

      "´ " v + " $t UTPT " + p + " - ª" + STRç
      '$t' 2. ROOT

      tail 0 == IF THEN
        "T(" v çQ + ";" + 1 p - + ")" + çTAG
      ELSE
        "T(" v çQ + ";" + p + ")" + çTAG
      END

      '$t' PURGE

      POP
    ª
  ª

  AppStatDistInvUniform ´
    @#NOTE App: AppStatDistInvUniform

    "Uniform X~U(å,ﬂ;p(x))"
    {
      { "å:" "Lower bound" }
      { "ﬂ:" "Upper bound" }
      { "p(x):" "Cum. probability (left tail)" }
    }
    { 1 0 }
    { }
    { 0 1 .5 }
    UtilGuiInform

    ç a b p
    ´
      @ Input validations.
      b 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      a p b a - * +
      "U(" a + "," + b + ";" + p + ")" + çTAG

      POP
    ª
  ª

  AppStatDistInvWeibull ´
    @#NOTE App: AppStatDistInvWeibull

    "Weibull X~W(å,ﬂ)"
    {
      { "å:" "Parameter å" }
      { "ﬂ:" "ﬂ, if you have ñ ç ﬂ=1/ñ" }
      { "p(x):" "Cum. probability (left tail)" }
    }
    { 1 0 }
    { }
    { 2 1 .5 }
    UtilGuiInform

    ç a b p
    ´
      @ Input validations.
      p 0 1 "p(x)" UtilValidateRange

  UtilPushSystemFlagsApp

      1 p - LN NEG LN a / EXP b / çNUM
      "W(" a + "," + b + ";" + p + ")" + çTAG

      POP
    ª
  ª

  AppStatPercentile ´
    @#NOTE App: AppStatPercentile

    @ Saves the current system flags and the directory path.
    PUSH
    -105 SF @ System flag: enable approximate mode.

    SWAP UtilArrayListToList XNUM

    @ Inspired on the function "%TILE" from: "HP 50g / 49g+ / 48gII graphing
    @ calculator, advanced user's reference manual".

    SORT      @ Brings the list to level 1 and sorts it.
    DUP SIZE  @ Copies the list, then finds its size.
    1 + ROT % @ Calculates the position of the specified percentile.
    DUP2      @ Makes a copy of the list and the percentile.

    FLOOR                 @ Rounds the position to the lower integer.
    1 MAX OVER SIZE MIN   @ Ensures it is between 1 and the size of the list.
    EVAL GET              @ Gets the corresponding number.

    ROT ROT   @ Moves the list to level 1.

    CEIL                @ Rounds the position to the upper integer.
    1 MAX OVER SIZE MIN @ Ensures it is between 1 and the size of the list.
    EVAL GET            @ Gets the corresponding number.

    + 2 /     @ Calculates the average of the two numbers.

    POP
  ª

  AppTimeDateAdd ´
    @#NOTE App: AppTimeDateAdd

    "DATE ADD/SUBTRACT"
    {
      { "D:" "Start day" }
      { "M:" "Start month" }
      { "Y:" "Start year" }
      { "D+" "Num. of days to add/subtract" }
      { "M+" "Num. of months to add/subtract" }
      { "Y+" "Num. of years to add/subtract" }
      { "Rep:" "Times to repeat the operation" }
    }
    { 3 0 }
    { }
    PUSH -42 SF
    DATE
    UtilDateToStack 0 0 0 1 7 çLIST @ Retrieve the current date.
    POP
    UtilGuiInform

    ç d m y ad am ay rep
    ´
      @ Input validations.
      d 1 31 "start day" UtilValidateRange
      m 1 12 "start month" UtilValidateRange
      y 1582 9999 "start year" UtilValidateRange

      UtilPushSystemFlagsApp
      -42 SF  @ System flag: date format to DD.MMYYYY.

      @ Print the start date.
      d m y UtilDateFromStack UtilDateToStr "D0" çTAG

      1 rep FOR r
        @ Calculate the new date.
        d m y ad r * am r * ay r * UtilDateAddDate

        @ Print the 'r' date.
        UtilDateToStr
        "D" r çQ + çTAG
      NEXT

      POP
    ª
  ª

  AppTimeDateDifference ´
    @#NOTE App: AppTimeDateDifference

    "DATE DIFFERENCE"
    {
      { "D:" "Start day" }
      { "M:" "Start month" }
      { "Y:" "Start year" }
      { "D:" "End day" }
      { "M:" "End month" }
      { "Y:" "End year" }
    }
    { 3 0 }
    { }
    PUSH -42 SF
    DATE UtilDateToStack          @ Retrieve the current date.
    DATE 10 DATE+ UtilDateToStack @ Retrieve the current date (+ 10 days).
    POP
    6 çLIST
    UtilGuiInform

    ç sd sm sy ed em ey
    ´
      @ Input validations.
      sd 1 31 "start day" UtilValidateRange
      sm 1 12 "start month" UtilValidateRange
      sy 1582 9999 "start year" UtilValidateRange
      ed 1 31 "end day" UtilValidateRange
      em 1 12 "end month" UtilValidateRange
      ey 1582 9999 "end year" UtilValidateRange

      UtilPushSystemFlagsApp
      -42 SF  @ System flag: date format to DD.MMYYYY.

      sd sm sy UtilDateFromStack
      ed em ey UtilDateFromStack

      DDAYS çQ
      "Days" çTAG

      POP
    ª
  ª

  @ ---------------------------------------------------------------------------
  @ #XXX Util functions
  @ These functions are used internally by the Apps.
  @ ---------------------------------------------------------------------------

  UtilArrayListDecompose ´
    @#NOTE Function: UtilArrayListDecompose
    @ This function decomposes (squash) an array or list.

    DUP TYPE ç v vType
    ´
      CASE

        @ Type: List (type 5).
        vType 5 == THEN
          v OBJç EVAL
        END

        @ Type: Real array (type 3)
        @ Type: Symbolic vector/matrix (type 29).
        vType 3 == vType 29 == OR THEN
          v OBJç 1 + úLIST
        END

        v
        "Error: The argument must be an array or a list!" DOERR
      END
    ª
  ª

  UtilArrayListToDAT ´
    @#NOTE Function: UtilArrayListToDAT
    @ This function converts an array or list to the DAT matrix. This matrix
    @ contains the data used by the Statistics applications.

    UtilArrayListDecompose

    @ Convert the data on the stack into a matrix with one column.
    1 2 çLIST çARRY

    @ Store it on the system variable 'ÖDAT'.
    STOÖ

    @ Set the independent-variable column of the 'ÖDAT'.
    1 XCOL
  ª

  UtilArrayListToList ´
    @#NOTE Function: UtilArrayListToDAT
    @ This function converts an array or list to list.

    UtilArrayListDecompose

    @ Convert the data on the stack into a list.
    çLIST
  ª

  UtilConvertMixedFraction ´
    @#NOTE Function: UtilConvertMixedFraction

    DUP TYPE ç v vType
    ´
      CASE
        @ Type: Real number (type 0).
        @ Type: Complex number (type 1).
        vType 0 == vType 1 == OR THEN
          v XQ
        END

        @ Type: Real integer (type 28).
        vType 28 == THEN
          v XNUM
        END

        @ Type: Algebraic object (type 9).
        vType 9 == THEN
          v LNAME SIZE 0 == IF THEN
            @ Only numbers.
            XNUM
          ELSE
            XQ
          END
        END

        @ Type: Real array (type 3)
        @ Type: Complex array (type 4)
        @ Type: List (type 5).
        @ Type: Symbolic vector/matrix (type 29).
        vType 3 == vType 4 == OR vType 5 == OR vType 29 == OR THEN
          1
          @ Get the total size of the array/vector/list.
          v SIZE
          v SIZE TYPE 5 == IF THEN
            1 + úLIST
          END

          @ Check if there is a real or complex element.
          ç vSize
          ´
            vSize FOR k
              v k GET TYPE DUP 0 == SWAP 1 == OR IF THEN
                v XQ
                KILL
              END
            NEXT
          ª
          v XNUM
        END

        @ Type: Tagged object (type 12).
        vType 12 == THEN
          v OBJç SWAP UtilConvertMixedFraction SWAP çTAG
        END

        @ Type: Unit object (type 12).
        vType 13 == THEN
          v OBJç SWAP UtilConvertMixedFraction SWAP *
        END

        @ Type: other types.
        v
      END
    ª
  ª

  UtilDateAddDate ´
    @#NOTE Function: UtilDateAddDate

    ç d m y ad am ay
    ´
      @ Convert the input start date to DATE format (DD.MMYYYY).
      d m y UtilDateFromStack

      @ Shift the date by 10 days to avoid month-boundary bugs in calculations.
      d 27 > IF THEN
        -10 DATE+
      END

      @  Add/subtract years.
      ay UtilDateAddYear

      @ Add months to the start date.
      am 0 > IF THEN
        @ Check for overflow (month + am > 12).
        am 12 MOD m + 12 > IF THEN
          m 100 / -                       @ Remove the month part.
          am 12 MOD m + 12 - 100 / +      @ Add the correct month.
          1 UtilDateAddYear               @ Add 1 year of overflow.
        ELSE
          am 12 MOD 100 / +               @ Simple month addition.
        END

        @ Add necessary years.
        am 12 / FLOOR UtilDateAddYear
      END

      @ Subtract months to the start date.
      am 0 < IF THEN
        @ Check for underflow (month - am < 1).
        am 12 -1 * MOD m + 1 < IF THEN
          m 100 / -                       @ Remove the month part.
          am 12 -1 * MOD m + 12 + 100 / + @ Add the correct month.
          -1 UtilDateAddYear              @ Subtract 1 year of underflow.
        ELSE
          am 12 -1 * MOD 100 / +          @ Simple month subtraction.
        END

        @ Subtract necessary years.
        am -1 * 12 / FLOOR -1 * UtilDateAddYear
      END

      @ Revert the 10 day shift.
      d 27 > IF THEN
        10 DATE+
      END

      @ Add/subtract days.
      ad DATE+
    ª
  ª

  UtilDateAddYear ´
    @#NOTE Function: UtilDateAddYear

    ç dt y
    ´
      dt y 1000000 / + çNUM
    ª
  ª

  UtilDateFromStack ´
    @#NOTE Function: UtilDateFromStack

    ç d m y
    ´
      @ Convert the input start date to DATE format (DD.MMYYYY).
      d çNUM "" + m 10 < IF THEN "0" + END m + y + OBJç
    ª
  ª

  UtilDateToStack ´
    @#NOTE Function: UtilDateToStack

    ç dt
    ´
      UtilPushSystemFlagsApp

      @ Day.
      dt FLOOR çQ

      @ Month.
      dt FP 100 *
      DUP FLOOR çQ

      @ Year.
      SWAP FP 10000  * çQ

      POP
    ª
  ª

  UtilDateToStr ´
    @#NOTE Function: UtilDateToStr
    @ This function converts the date into string format "DOW DD/MM/YYYY".

    DUP UtilDateToStack ç dt d m y
    ´
      dt 0 TSTR 1 6 SUB "/" +
      dt 0 TSTR 8 9 SUB "/" + +
      y +
    ª
  ª

  UtilGuiChoose ´
    @ #NOTE Function: UtilGuiChoose

    1
    CHOOSE

    @ Exit if the user presses "Cancel".
    NOT IF THEN KILL END

    @ Evaluate the action.
    EVAL
  ª

  UtilGuiInform ´
    @ #NOTE Function: UtilGuiInform

    INFORM

    @ Exit if the user presses "Cancel".
    NOT IF THEN KILL END

    @ Extract the values from the list.
    EVAL
  ª

  UtilMenuAddItem ´
    @ #NOTE Function: UtilMenuAddItem

    ç lbl act
    ´
      @ Saves the current system flags and the directory path.
      PUSH
      -51 CF @ System flag: Fraction mark is "." (period).
      STD    @ System flag: number display format to Standard.

      DUP { "" } + SIZE
      "" lbl + + act
      2 çLIST 1 çLIST +

      POP
    ª
  ª

  UtilPurgeHomeFiles ´
    @ #NOTE Function: UtilPurgeHomeFiles
    @  Purges all files and directories from the HOME directory, excluding
    @  program files (type 8).

    HOME

    @ Clear the user keys.
    0 DELKEYS

    @ Clear the user alarms.
    0 DELALARM

    @ Loop through each item in HOME and process based on its type.
    VARS 1
    ´
      DUP VTYPE ç v vType
      ´
        CASE
           @ If item is a directory (type 15), delete it using PGDIR.
          vType 15 == THEN v PGDIR END

           @ If item is a program (type 8), skip it.
          vType 8 == THEN END

          @ For all other types, purge the item.
          v PURGE
        END
      ª
    ª
    DOLIST

    @ Restore CAS variables from "CASDIR" directory.
    CASCFG
  ª

  UtilPushSystemFlagsApp ´
    @ #NOTE Function: UtilPushSystemFlagsApp

    @ Saves the current system flags and the directory path.
    PUSH

    @ Set optimal flags to use in almost all apps of this library.
    -2 CF   @ System flag: symbolic constants retain their symbolic form
    -3 CF   @ System flag: functions evaluate to symbolic results.
    -17 SF  @ System flag: enable radians mode.
    -105 SF @ System flag: enable approximate mode.
    STD     @ System flag: number display format to Standard.
  ª

  UtilResetSystemFlagsAlgebraic ´
    @ #NOTE Function: UtilResetSystemFlagsAlgebraic
    @ This function restores the calculator flags to its factory settings.

    @ Restore default flags.
    {# 204010FF0h # 0h # 8000000042000000h # 0h} STOF

    @ Set the FONT8 (default).
    FONT8 çFONT
  ª

  UtilResetSystemFlagsRpn ´
    @ #NOTE Function: UtilResetSystemFlagsRpn
    @ This function restores the calculator flags to use with RPN mode.

    @ Restore my custom flags.
    @-56 SF Disable Error Beep.
    @-95 CF Set RPN mode.
    @-117 SF Enable soft menus.
    {# 80000204010FF0h # 0h # 8010000002000000h # 0h} STOF

    @ Set the FONT6.
    FONT6 çFONT
  ª

  UtilTriangleHeronArea ´
    @ #NOTE Function: UtilTriangleHeronArea

    ç a b c
    ´
      a b + c + 2 /
      ç s
      '(s*(s-a)*(s-b)*(s-c))^(1/2)'
    ª
  ª

  UtilTriangleLawOfCossineAngle ´
    @ #NOTE Function: UtilTriangleLawOfCossineAngle

    ç a b c
    'ACOS((a^2 + b^2 - c^2) / (2*a*b))'
  ª

  UtilTriangleLawOfCossineSide ´
    @ #NOTE Function: UtilTriangleLawOfCossineSide

    ç a b C
    '(a^2 + b^2 - 2*a*b*COS(C)) ^ (1/2)'
  ª

  UtilTriangleLawOfSinesAngle ´
    @ #NOTE Function: UtilTriangleLawOfSinesAngle

    ç a A b
    'ASIN((b * SIN(A)) / a)'
  ª

  UtilTriangleLawOfSinesSide ´
    @ #NOTE Function: UtilTriangleLawOfSinesSide

    ç a A B
    '(a * SIN(B)) / SIN(A)'
  ª

  UtilValidateLessEqual ´
    @ #NOTE Function: UtilValidateLessEqual

    ç a b aLabel bLabel
    ´
      b a < IF THEN
        "Error: '" aLabel + "' must be less than or equal to '" + bLabel + "'."
        + DOERR
      END
    ª
  ª

  UtilValidateRange ´
    @ #NOTE Function: UtilValidateRange

    ç x a b xLabel
    ´
      x a < x b > OR IF THEN
        "Error: '" xLabel + "' must be between " + a + " and " + b + "." +
        DOERR
      END
    ª
  ª

  @ ---------------------------------------------------------------------------
  @ #XXX Visible functions
  @ These functions are visible in the library menu.
  @ ---------------------------------------------------------------------------

  EXTPK ´
    @ #NOTE Function (Visible): EXTPK

    ChooseMainMenu
  ª

  RSALG ´
    @ #NOTE Function (Visible): RSALG

    UtilPurgeHomeFiles
    UtilResetSystemFlagsAlgebraic
    AppMenuEquations
    CLEAR
  ª

  RSRPN ´
    @ #NOTE Function (Visible): RSRPN

    UtilPurgeHomeFiles
    UtilResetSystemFlagsRpn
    AppMenuEquations
    CLEAR
  ª

  XFRAC ´
    @ #NOTE Function (Visible): XFRAC

    UtilConvertMixedFraction
  ª

  NSOLVE ´
    @ #NOTE Function (Visible): NSOLVE

    AppSolveNumerical
  ª

  DSTAT ´
    @ #NOTE Function (Visible): DSTAT

    AppStatDescriptiveStatistics
  ª

  RECPOL ´
    @ #NOTE Function: RECPOL
    @ This function toggles between Rectangular, Polar modes.

    @ Is "Rectangular" mode?
    IF -16 FC? THEN
      CYLIN
    ELSE
      RECT
    END
  ª

  CMENU ´
    @ #NOTE Function (Visible): CMENU

    ChooseCustomMenus
  ª

END
